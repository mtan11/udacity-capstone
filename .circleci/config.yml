# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  docker: circleci/docker@2.1.2
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@1.3

commands:
  destroy-environment:
    description: Destroy front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name capstone-project-<<parameters.workflow_id>>-node-group-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name capstone-project-<<parameters.workflow_id>>-cluster

jobs:
  install-and-check-lint:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            cd app 
            python3 -m venv .devops
            source .devops/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - run:
          name: Run lint
          command: |
            cd app
            source .devops/bin/activate
            make lint

  build-and-push-docker-image:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build and push docker image
          command: |
            cd app
            export IMAGE_VER=$(<version.txt)
            # Build docker image
            docker build -t mtan11/capstone-project .
            
            # Login into docker-hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASS"
            
            # We push two images with different version tags: given verision and latest
            docker push mtan11/capstone-project:latest

  deploy-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar curl aws-cli
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.8/2020-09-18/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: deploy cluster
          command: |
            eksctl create cluster --name capstone-proj-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  deploy-config: 
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/requirements.txt" }}
            - v1-dependencies-
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: false
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone-proj-${CIRCLE_WORKFLOW_ID:0:7}
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: "kubernetes/capstone-frontend-deployment.yml"
          resource-name: deployment/capstone-proj
      - kubernetes/create-or-update-resource:
          resource-file-path: "kubernetes/capstone-frontend-service.yml"
          resource-name: deployment/capstone-proj
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    executor: aws-eks/python3
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone-proj-${CIRCLE_WORKFLOW_ID:0:7}
          install-kubectl: true
          aws-region: ${AWS_DEFAULT_REGION}
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get pods
            kubectl get services
            sleep 30
            # for attempt in {1..20}; do
            #   EXTERNAL_IP=$(kubectl get service capstone-project-${CIRCLE_WORKFLOW_ID:0:7} | awk '{print $4}' | tail -n1)
            #   echo "Checking external IP: ${EXTERNAL_IP}"
            #   if [ -n "${EXTERNAL_IP}" ] && [ -z $(echo "${EXTERNAL_IP}" | grep "pending") ]; then
            #     break
            #   fi
            #   echo "Waiting for external IP to be ready: ${EXTERNAL_IP}"
            #   sleep 10
            # done
            # sleep 100
            # echo "External IP: ${EXTERNAL_IP}"
            # curl -s --retry 10 "http://$EXTERNAL_IP/alive" | grep "Hello, World!"
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  cleanup:
      docker:
        - image: amazon/aws-cli
      parameters:
        workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - checkout
        - run:
            name: Get old stack workflow id && Remove old stacks and files
            command: |
              # your code here
              export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
              then
                aws cloudformation delete-stack --stack-name capstone-project-<<parameters.workflow_id>>-node-group-<<parameters.workflow_id>>
                aws cloudformation delete-stack --stack-name capstone-project-<<parameters.workflow_id>>-cluster
              else
                echo "Do nothing"
              fi

workflows:
  default:
    jobs:
      - install-and-check-lint
      - build-and-push-docker-image:
          requires: [install-and-check-lint]
          filters:
            branches:
              only: [main]
      - deploy-infrastructure:
          requires: [build-and-push-docker-image]
      - deploy-config:
          requires: [deploy-infrastructure]
      - smoke-test:
          requires: [deploy-config]
      - cleanup:
          requires: [smoke-test]          
